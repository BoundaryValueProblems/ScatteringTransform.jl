using FFTW
using Shearlab
Shearletsystem2D{Float16}<:Shearletsystem2D
Shearlab.Shearletsystem2D{Float16}<:Shearlab.Shearletsystem2D
using Wavelets
ls
pwd()
using Shearlab
exit()
using Shearlab
exit()
exit())
exit()
exit()
exit()
thing = layeredTransform{Float64, 2}(3,(30,2), [33.2, 43.1], [3.0f0, 1.0f4])
thing = layeredTransform{Float64, 2}(3,(30,2), [33.2, 43.1], [3.0f0, 1.0f4])
size(thing.n)
length(thing.n)
eltype(thing.shears)
eltypes(thing)
using ScatteringTransform
Pkg.resolve()
using Pkg
Pkg.resolve()
Pkg.activate("/home/dsweber/.julia/dev/ScatteringTransform/")
Pkg.add("Shearlab")
using ScatteringTransform
exit()
using ScatteringTransform
exit()
exit()
using ScatteringTransform
exit()
julia> 
\
layers
layers
layers = layeredTransform(m, (28, 28), subsamples=[28/19, 19/13, 13/8], shearLevel=Int.(ceil.((1:4)/4)), typeBecomes = Float32);
layesr
layers
ScatteringTransform.createFFTPlans(layers)
ScatteringTransform.createFFTPlans(layers)
exit())
exit()
using Pkg
Pkg.test("ScatteringTransform"")
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
size(X)
Array(size(randn(10,10,5)))
Array{Float64}(size(randn(10,10,5)))
Array{Float64,1}(size(randn(10,10,5)))
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
X = randn(5,10,43)
y = randn(43);
X.* y
X.* y'
X .* y
broadcast(X,y,dims=3)
broadcast(*, X,y)
randn(10,43) .* y
y .* randn(10,43)
reshape(y, (1,43)) .* randn(10,43)
X .* reshape(y, (1,1,43))
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
randn(5, 10, 43) .* randn(1,1,43)
randn(5, 10, 43) .* randn(1,1,43)
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
exit()
using Pkg
Pkg.test("ScatteringTransform")
Pkg.test("ScatteringTransform")
n
Pkg.test("ScatteringTransform")
exit()
